{"ast":null,"code":"import CustomInput from \"./ui/CustomInput.vue\";\nimport CustomSelect from \"./ui/CustomSelect.vue\";\nimport CustomFilterBtn from \"./ui/CustomFilterBtn.vue\";\nimport { mapActions, mapState, mapGetters } from \"vuex\";\nimport { map } from \"@/Ymaps/ymaps\";\nexport default {\n  name: 'MenuLeft',\n  components: {\n    CustomInput,\n    CustomSelect,\n    CustomFilterBtn\n  },\n  data() {\n    return {\n      menuList: [{\n        id: 'ВУЗ',\n        imgPath: '/menuImages/universImg.svg',\n        description: 'ВУЗы',\n        backgroundColor: 'rgb(183, 116, 245)'\n      }, {\n        id: \"Коворкинг\",\n        imgPath: '/menuImages/kovorkingImg.svg',\n        description: 'Коворкинги',\n        backgroundColor: 'rgb(253, 253, 22)'\n      }, {\n        id: \"Библиотека\",\n        imgPath: '/menuImages/biblioteki.svg',\n        description: 'Библиотеки',\n        backgroundColor: 'rgb(105, 250, 255)'\n      }, {\n        id: \"Кафе\",\n        imgPath: '/menuImages/kafe.svg',\n        description: 'Кафе',\n        backgroundColor: 'rgb(235, 125, 0)'\n      }, {\n        id: \"Музей\",\n        imgPath: '/menuImages/museum.svg',\n        description: 'Музеи',\n        backgroundColor: 'rgb(40, 220, 0)'\n      }],\n      searchString: ''\n    };\n  },\n  mounted() {\n    this.loadUniversities();\n  },\n  computed: {\n    ...mapGetters({\n      coords: \"getCoords\"\n    }),\n    ...mapState({\n      universities: \"universities\",\n      marksConfigs: \"marksConfigs\"\n    })\n  },\n  methods: {\n    ...mapActions({\n      addMarks: 'addMarksFromType',\n      loadUniversities: 'loadUniversities',\n      loadCoordsByAdress: \"loadCoordsByAdress\",\n      findPlaceByNameAndAddress: \"findPlaceByNameAndAddress\"\n    }),\n    async changeUniversity(universityName) {\n      if (map.geoObjects.getLength()) {\n        map.geoObjects.removeAll();\n      }\n      let university = this.universities.find(item => item.name === universityName);\n      let addressArray = university.address.split(';');\n      await this.loadCoordsByAdress(addressArray);\n      for (let i = 0; i < this.coords.length; i++) {\n        map.geoObjects.add(new ymaps.Placemark(this.coords[i], {\n          balloonContentHeader: university.name,\n          balloonContentBody: addressArray[i]\n        }, this.marksConfigs.find(config => config.id === \"ownUniversity\").config));\n      }\n    },\n    findPlace(str) {\n      console.log(map.getCenter());\n      this.searchString = str;\n      this.findPlaceByNameAndAddress(str);\n    }\n  }\n};","map":{"version":3,"names":["CustomInput","CustomSelect","CustomFilterBtn","mapActions","mapState","mapGetters","map","name","components","data","menuList","id","imgPath","description","backgroundColor","searchString","mounted","loadUniversities","computed","coords","universities","marksConfigs","methods","addMarks","loadCoordsByAdress","findPlaceByNameAndAddress","changeUniversity","universityName","geoObjects","getLength","removeAll","university","find","item","addressArray","address","split","i","length","add","ymaps","Placemark","balloonContentHeader","balloonContentBody","config","findPlace","str","console","log","getCenter"],"sources":["/home/brulik/projects/hackaton_leti2/digital_students/src/components/MenuLeft.vue"],"sourcesContent":["<template>\n  <div class=\"menu\">\n      <div class=\"studyPlaceSelection\">\n          <p>Выберите место учебы:</p>\n          <CustomSelect\n            :universities=\"universities\"\n            @changeSelect=\"changeUniversity\"\n          >\n          </CustomSelect>\n      </div>\n      <CustomInput \n        @find=\"findPlace\" \n        :searchString=\"searchString\">\n      </CustomInput>\n      <div class=\"filterBtns\">\n          <CustomFilterBtn @click=\"addMarks(item.id)\" v-for=\"item in menuList\"\n            :imgPath=\"item.imgPath\"\n            :description=\"item.description\"\n            :backgroundColor=\"item.backgroundColor\"\n          >\n          </CustomFilterBtn>\n      </div>\n  </div>\n</template>\n\n<script>\nimport CustomInput from \"./ui/CustomInput.vue\";\nimport CustomSelect from \"./ui/CustomSelect.vue\";\nimport CustomFilterBtn from \"./ui/CustomFilterBtn.vue\";\nimport { mapActions, mapState, mapGetters } from \"vuex\";\nimport { map } from \"@/Ymaps/ymaps\";\n\nexport default {\n    name: 'MenuLeft',\n    components: {\n        CustomInput,\n        CustomSelect,\n        CustomFilterBtn,\n    },\n    data() {\n        return {\n            menuList: [ \n                {\n                    id: 'ВУЗ',\n                    imgPath: '/menuImages/universImg.svg',\n                    description: 'ВУЗы',\n                    backgroundColor: 'rgb(183, 116, 245)',\n                },\n                {\n                    id: \"Коворкинг\",\n                    imgPath: '/menuImages/kovorkingImg.svg',\n                    description: 'Коворкинги',\n                    backgroundColor: 'rgb(253, 253, 22)',\n                },\n                {\n                    id: \"Библиотека\",\n                    imgPath: '/menuImages/biblioteki.svg',\n                    description: 'Библиотеки',\n                    backgroundColor: 'rgb(105, 250, 255)',\n                },\n                {\n                    id: \"Кафе\",\n                    imgPath: '/menuImages/kafe.svg',\n                    description: 'Кафе',\n                    backgroundColor: 'rgb(235, 125, 0)',\n                },\n                {\n                    id: \"Музей\",\n                    imgPath: '/menuImages/museum.svg',\n                    description: 'Музеи',\n                    backgroundColor: 'rgb(40, 220, 0)',\n                }\n            ],\n            searchString: '',\n        }\n    },\n    mounted() {\n        this.loadUniversities();\n    },\n    computed: {\n        ...mapGetters({\n            coords: \"getCoords\"\n        }),\n        ...mapState({\n            universities: \"universities\",\n            marksConfigs: \"marksConfigs\",\n        })\n    },\n    methods: {\n      ...mapActions({\n        addMarks: 'addMarksFromType',\n        loadUniversities: 'loadUniversities',\n        loadCoordsByAdress: \"loadCoordsByAdress\",\n        findPlaceByNameAndAddress: \"findPlaceByNameAndAddress\",\n      }),\n      async changeUniversity(universityName) {\n        if (map.geoObjects.getLength()) {\n            map.geoObjects.removeAll();\n        }\n        \n        let university = this.universities.find(item => item.name === universityName);\n        let addressArray = university.address.split(';');\n\n        await this.loadCoordsByAdress(addressArray)\n\n        for (let i = 0; i < this.coords.length; i++) {\n            map.geoObjects.add(new ymaps.Placemark(this.coords[i], {\n                balloonContentHeader: university.name,\n                balloonContentBody: addressArray[i],\n            }, this.marksConfigs.find(config => config.id === \"ownUniversity\").config));\n        }\n      },\n      findPlace(str) {\n        console.log(map.getCenter());\n        this.searchString = str;\n        this.findPlaceByNameAndAddress(str);\n      }\n    }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.menu, .filterBtns, .studyPlaceSelection {\n    display: flex;\n}\n\n  .menu {\n      flex-direction: column;\n      padding: 10px;\n  }\n\n  .filterBtns {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 25px;\n  }\n\n  .studyPlaceSelection {\n      flex-direction: row;\n      align-items: center;\n      justify-content: space-between;\n      margin: 5px;\n      font-size: 0.7em;\n      font-weight: 700;\n  }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}